package models;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;

public class Meyer
{
// This is Eugene Meyer's algorithm adapted for LTIHub: http://www.xmailserver.org/diff2.pdf
   public static String shortestEditScript(String previousVersion, String currentVersion) {
      List<int[]> savedDiagonals = meyersForwardSES(previousVersion, currentVersion);
	int INDEX_SHIFT = currentVersion.length() + 2; 

        List<Integer> insertionsStarts = new ArrayList<>();
        List<String> insertionsArgs = new ArrayList<>();
        List<Integer> deletionsStart = new ArrayList<>();
        List<Integer> deletionsLengths = new ArrayList<>();        
        
	int x = previousVersion.length();
	int y = currentVersion.length();
	for (int d = savedDiagonals.size() - 1; (d >= 0) && (x > 0 || y > 0); d--) {
           int[] diagonals = savedDiagonals.get(d);

           int k = x - y;
           boolean downNotRight = (k == -d) || (k != d && diagonals[INDEX_SHIFT + k - 1] < diagonals[INDEX_SHIFT + k + 1]);

           int previousK = downNotRight ? (k + 1) : (k - 1);

           int xStart = diagonals[INDEX_SHIFT + previousK];
           int yStart = xStart - previousK;

           if (yStart >= 0) {
              if (downNotRight) {
                 if (insertionsStarts.size() > 0 && insertionsStarts.get(0) == yStart + 1) {
                    insertionsStarts.set(0, yStart);
                    insertionsArgs.set(0, currentVersion.charAt(yStart) + insertionsArgs.get(0));
                 } else {
                    insertionsStarts.add(0, yStart);
                    insertionsArgs.add(0, "" + currentVersion.charAt(yStart));
                 }
              } else {
                 
                 if (deletionsStart.size() > 0 && deletionsStart.get(0) == xStart + 1) {
                    deletionsStart.set(0, xStart);
                    deletionsLengths.set(0, deletionsLengths.get(0) + 1);
                 } else {
                    deletionsStart.add(0, xStart);
                    deletionsLengths.add(0, 1);
                 }
                 
              }
           }
           
           x = xStart;
           y = yStart;
	}

	// Generate the edit script from instructions
	String editScript = "";
	for (int i = deletionsStart.size() - 1; i >= 0; i--) {
           editScript += deletionsStart.get(i) + "," + deletionsLengths.get(i) + "|";
	}

	if (insertionsStarts.size() > 0)
           editScript += " ";

	for (int i = 0; i < insertionsStarts.size(); i++) {
           editScript += insertionsStarts.get(i) + "," + insertionsArgs.get(i).length() + "," + insertionsArgs.get(i); 
	}
	return editScript;
}

   public static List<int[]> meyersForwardSES(String previousVersion, String currentVersion) {
      int MAX = previousVersion.length() + currentVersion.length();
      List<int[]> savedDiagonals = new ArrayList<>();

      // CSH increased INDEX_SHIFT and array length from the
      // JavaScript version to allow for 0 elements at the fringe.

      int[] diagonals = new int[MAX + 4];
      for (int i = 1; i <= MAX + 1; i++) {
         diagonals[i] = -1;
      }

      int INDEX_SHIFT = currentVersion.length() + 2;
      diagonals[INDEX_SHIFT + 1] = 0;
      for (int d = 0; d <= MAX; d++) {
         int kStart = -d;
         if (kStart < -currentVersion.length()) {
            kStart = -currentVersion.length();
            if ((kStart % 2) != (-d % 2)) {
               kStart--;
            }
         }
         for (int k = kStart; k <= Math.min(d, previousVersion.length()); k += 2) {
            boolean downNotRight = (k == -d) || (k != d && diagonals[INDEX_SHIFT + k - 1] < diagonals[INDEX_SHIFT + k + 1]);

            int kPrev = downNotRight ? (k + 1) : (k - 1);
            
            int xStart = diagonals[INDEX_SHIFT + kPrev];
            int yStart = xStart - kPrev;

            int xMid = downNotRight ? (xStart) : (xStart + 1);
            int yMid = xMid - k;

            int xEnd = xMid;
            int yEnd = yMid;

            while (xEnd < previousVersion.length() && yEnd < currentVersion.length() && previousVersion.charAt(xEnd) == currentVersion.charAt(yEnd)) {
               xEnd++;
               yEnd++;
            }

            diagonals[INDEX_SHIFT + k] = xEnd;

            if (xEnd >= previousVersion.length() && yEnd >= currentVersion.length()) {
               savedDiagonals.add(diagonals);
               return savedDiagonals;
            }
         }
         savedDiagonals.add(Arrays.copyOf(diagonals, diagonals.length));
      }
      return null;
   }

// Apply a delta generated by the above implementation of Meyer's aglorithm above
   public static String applyEditScript(String input, String editScript) {
      String output = input;

      int i = 0;
      /*
        Apply deletions
        a deletion instruction follows this fomat: (indexInResult,numberOfDeletionsAfterIndex|)
        for example to change "Hello World!" to "Hold": "11,1|5,4|1,3|"
      */
      while (i < editScript.length() && editScript.charAt(i) != ' ') {
         int indexOfParameterSeparation = editScript.indexOf(",", i);
         int indexOfInstanceSeparation = editScript.indexOf("|", indexOfParameterSeparation + 1);

         int indexOfDeletion = Integer.parseInt(editScript.substring(i, indexOfParameterSeparation));
         int numberOfDeletions = Integer.parseInt(editScript.substring(indexOfParameterSeparation + 1, indexOfInstanceSeparation));
         
         output = output.substring(0, indexOfDeletion) + output.substring(indexOfDeletion + numberOfDeletions);

         i = Math.max(indexOfInstanceSeparation + 1, i + 1);
      }

      
	// Skip past the space that separates the deletion commands from the insertion commands
      if (i < editScript.length() && editScript.charAt(i) == ' ')
         i++;
      
      /*
        Apply insertions
        an insertion instruction follows this format: (indexInResult,lengthOfInsertion,insertion)
        for example to change "Hold" to "Hello World!": "1,3,ell5,4, Wor11,1,!"
	*/
      while (i < editScript.length()) {
         int indexOfFirstSeparation = editScript.indexOf(",", i);
         int indexOfSecondSeparation = editScript.indexOf(",", indexOfFirstSeparation + 1);

         int indexOfInsertion = Integer.parseInt(editScript.substring(i, indexOfFirstSeparation));
         int lengthOfInsertion = Integer.parseInt(editScript.substring(indexOfFirstSeparation + 1, indexOfSecondSeparation));
         String insertion = editScript.substring(indexOfSecondSeparation + 1, (indexOfSecondSeparation + 1) + lengthOfInsertion);
         
         output = output.substring(0, indexOfInsertion) + insertion + output.substring(indexOfInsertion);

         i = Math.max((indexOfSecondSeparation + 1) + lengthOfInsertion, i + 1);
      }
	
      return output;
   }
}